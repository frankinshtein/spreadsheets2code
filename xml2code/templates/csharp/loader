/*
 file was automatically generated
*/

using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Xml;

{% if lang.args.package %}
namespace {{lang.args.package}}
{
{% endif %}
{% if lang.args.static_class %}
public sealed partial class {{lang.args.static_class}}
{
{% endif %}

    public interface IConfigItem
    {
        public string Id {get; set;}
        public int IndexInArray {get; set;}
    }

    public class {{loader}}
    {
        public string Preset;
        public long Timestamp;

        public readonly List<string> ParseErrors = new();
        private string _current;

        {% for cls in classes %}
        public List<{{cls.name}}> List{{cls.name}} = new ();
        {% if cls.has_id %}
        public Dictionary<string, {{cls.name}}> Dict{{cls.name}} = new (StringComparer.InvariantCultureIgnoreCase);
        {% else %}
        {% endif %}

        {% endfor %}

        {% for cls in classes_with_id %}
        public Func<string, {{cls.name}}> Parse_{{cls.table_name}};
        {% endfor %}


        public {{loader}}(){
            {% for cls in classes_with_id %}
            Parse_{{cls.table_name}} = str=> UtilGetItem(Dict{{cls.name}}, str, true);
            {% endfor %}
        }

        public void Load(Stream stream, string preset = null, bool throwError = true)
        {
            Preset = preset;

            XmlDocument document = new XmlDocument();
            document.Load(stream);
            XmlElement root = document.DocumentElement;

            Timestamp = long.Parse(root.GetAttribute("timestamp"));

            {% for cls in classes_with_id %}
            //{{cls.name}} load
            {
                XmlNode child = root.GetElementsByTagName("{{cls.name}}").Item(0)!.FirstChild;

                var items = List{{cls.name}};
                items.Clear();

                var itemsMap = Dict{{cls.name}};
                itemsMap.Clear();

                while(child != null)
                {
                    if (child.NodeType == XmlNodeType.Element) {
                        {{cls.name}} item = new {{cls.name}}();
                        item.Id = UtilParse_String_(child, "id");
                        itemsMap[item.Id.ToLower()] = item;
                        item._xmlNode = child;
                        item.IndexInArray = items.Count;
                        items.Add(item);
                    }
                    child = child.NextSibling;
                }
            }
            {% endfor %}

            //init all classes

            {% for cls in classes %}
            /////////////load - {{cls.name}}
            {
                _current = "{{cls.name}}";
                List<{{cls.name}}> items = List{{cls.name}};

                for (int i = 0; i < items.Count; ++i)
                {
                    var item = items[i];

                    XmlNode presetNode = null;

                    {% if cls.has_id %}
                    //string id = UtilParse_String_(item._xmlNode, "id");
                    //if (id.Length == 0)
                    //    continue;

                    //{{cls.name}} item = UtilGetItem(Dict{{cls.name}}, id, true);

                    {{cls.name}} presetItem = null;
                    if (preset != null)
                        presetItem = UtilGetItem(Dict{{cls.name}}, item.Id + "#" + preset, false);
                    if (presetItem != null)
                        presetNode = presetItem._xmlNode;
                    {% else %}
                    {{cls.name}} item = new {{cls.name}}();
                    //item.xmlNode = element;
                    {% endif %}
                    item.Init(presetNode, this);
                }
            }
            {% endfor %}

            if (throwError && ParseErrors.Count > 0)
                throw new Exception(string.Join(", ", ParseErrors));
        }


        public void AssignStaticInstances()
        {
            {% for cls in classes %}
            {{cls.name}}.ItemsList = List{{cls.name}};
            {% if cls.has_id %}
            {{cls.name}}.ItemsDict = Dict{{cls.name}};
            {% else %}
            {% endif %}
            {% endfor %}
        }

        private static List<T> UtilParse_String2List<T>(string st, Func<string, T> fn) {
            var ls = new List<T>();
            if (st.Length > 0){
                var items = st.Split(',');
                for (int i = 0; i < items.Length; ++i) {
                    var item = items[i].Trim();
                    var res = fn(item);
                    ls.Add(res);
                }
            }
            return ls;
        }

        public T UtilParse_Single<T>(XmlNode node, string name, XmlNode presetNode, Func<string, T> fn)
        {
            string st = UtilParse_String(node, name, presetNode);
            return fn(st);
        }

        public List<T> UtilParse_List<T>(XmlNode node, string name, XmlNode presetNode, Func<string, T> fn)
        {
            return UtilParse_String2List(UtilParse_String(node, name, presetNode), fn);
        }

        public Dictionary<string, T> UtilParse_Named<T>(XmlNode node, string name, XmlNode presetNode, Func<string, T> fn) {

            var attrs = node.Attributes;
            string pref = name + ".";


            string suffix = "#" + Preset;

            Dictionary<string, T> items = new Dictionary<string, T>(StringComparer.InvariantCultureIgnoreCase);
            for (int i = 0; i < attrs.Count; ++i)
            {
                XmlNode attrNode = attrs.Item(i);
                string attrName = attrNode.Name;

                if (!attrName.StartsWith(pref) || attrName.Contains("#"))
                    continue;

                string nam = attrName.Substring(pref.Length).ToLower();
                string value = attrNode.Value;

                if (Preset != null){
                    XmlNode nodePreset = attrs.GetNamedItem(attrName + suffix);
                    if (nodePreset != null)
                        value = nodePreset.Value;
                }

                items.Add(nam, fn(value));

            }

            return items;
        }
    /*
        static Map<string, List<T>> utilParse_NamedList(XmlNode node, string name, string preset, XmlNode presetNode, Func<string, T> fn){
            Map<string, string> rs = utilParse_Named(node, name, preset, presetNode, fnString2String);
            return rs.entrySet().stream().collect(Collectors.toMap(entry->entry.getKey(), entry->utilParse_String2List(entry.getValue(), fn)));
        }
    */
        private string UtilParse_String(XmlNode node, string name, XmlNode presetNode)
        {
            string ret = null;
            if (presetNode != null)
                ret = UtilParse_String_(presetNode, name);
            if (ret != null && ret.Length > 0)
                return ret;
            return UtilParse_String_(node, name);
        }

        private string UtilParse_String_(XmlNode node, string name)
        {
            if (Preset != null)
            {
                string key = name + "#" + Preset;
                XmlNode attr = node.Attributes!.GetNamedItem(key);
                if (attr != null)
                    return attr.Value;
            }

            var namedItem = node.Attributes!.GetNamedItem(name);
            if (namedItem == null)
            {
                ParseErrors.Add($"missing field '{_current}.{name}'");
                return "";
            }

            string value = namedItem!.Value;
            return value;
        }



        public static T UtilGetItem<T>(Dictionary<string, T> itemsMap, string name, bool throwException) {
            if (string.IsNullOrEmpty(name))
                return default;
            if (itemsMap.TryGetValue(name, out var res))
                return res;
            if (throwException)
                throw new KeyNotFoundException($"Not found item '{name}' in {typeof(T)}");
            return default;
        }
    }
{% if lang.args.static_class %}
}
{% endif %}
{% if lang.args.package %}
}
{% endif %}