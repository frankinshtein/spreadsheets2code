/*
 file was automatically generated
*/

using System.Collections.Generic;
using System.Xml;

{% if lang.args.package %}
namespace {{lang.args.package}}
{
{% endif %}
{% if lang.args.static_class %}
public sealed partial class {{lang.args.static_class}}
{
{% endif %}
    public sealed partial class {{cls.name}}:IConfigItem
    {
        {% for field in cls.fields %}
            {% if field.is_array and field.named_list %}
        public Dictionary<string, List<{{ field.clazz.name }}>> {{ field.nice_name}};
            {% elif field.is_array %}
        public List<{{ field.clazz.name }}> {{ field.nice_name}};
            {% elif field.named_list %}
        public Dictionary<string, {{ field.clazz.name }}> {{ field.nice_name}};
            {% elif field.clazz.use_additional_field %}
        public string {{ field.nice_name}} {get; set;}
        public {{ field.clazz.name }} {{ field.nice_name}}Object {get; set;}
            {% else %}
        public {{ field.clazz.name }} {{ field.nice_name}} {get; set;}
            {% endif %}
        {% endfor %}
        public int IndexInArray {get;set;}

        public override string ToString()
        {
            return $"{{cls.name}}({Id})";
        }

        {% if cls.has_id %}
        public static {{cls.name}} Get(string id)
        {
            return {{loader}}.UtilGetItem(ItemsDict, id, true);
        }

        public static {{cls.name}} GetOrDefault(string id, {{cls.name}} def = null)
        {
            {{cls.name}} res = {{loader}}.UtilGetItem(ItemsDict, id, false);
            if (res != null)
                return res;
            return def;
        }
        {% endif %}

        #region Internal
        public static List<{{cls.name}}> ItemsList;
        {% if cls.has_id %}
        public static Dictionary<string, {{cls.name}}> ItemsDict;
        {% endif %}

        public XmlNode _xmlNode;


        public void Init(XmlNode presetNode, {{loader}} loader)
        {
{% for field in cls.fields_without_id %}
    {% if field.ext %}
    {% elif field.is_array and field.named_list %}
            {{field.nice_name}} = loader.UtilParse_NamedList(_xmlNode, "{{field.name}}", presetNode, {{field.parse_method_name}});
    {% elif field.is_array %}
            {{field.nice_name}} = loader.UtilParse_List(_xmlNode, "{{field.name}}", presetNode, {{field.parse_method_name}});
    {% elif field.named_list %}
            {{field.nice_name}} = loader.UtilParse_Named(_xmlNode, "{{field.name}}", presetNode, {{field.parse_method_name}});
    {% elif field.clazz.use_additional_field %}
            {{field.nice_name}} = loader.UtilParse_Single(_xmlNode, "{{field.name}}", presetNode, {{parser}}.Parse_string);
            {{field.nice_name}}Object = loader.UtilParse_Single(_xmlNode, "{{field.name}}", presetNode, {{field.parse_method_name}});
    {% else %}
            {{field.nice_name}} = loader.UtilParse_Single(_xmlNode, "{{field.name}}", presetNode, {{field.parse_method_name}});
    {% endif %}
{% endfor %}
        }
        #endregion
    }
{% if lang.args.static_class %}
}
{% endif %}
{% if lang.args.package %}
}
{% endif %}