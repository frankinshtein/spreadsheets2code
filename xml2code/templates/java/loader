package {{lang.args.package}};

/*
 file was automatically generated
*/

import com.google.protobuf.MapEntry;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
import java.io.ByteArrayInputStream;
import java.util.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.util.function.Function;
import java.util.stream.Collectors;
import org.w3c.dom.NamedNodeMap;

public class {{loader}}
{
    public String preset;
    public Long timestamp;
    public byte[] data;


    {% for cls in classes %}
    public ArrayList<{{cls.nice_name}}> list{{cls.nice_name}} = new ArrayList<>();
    {% if cls.has_id %}
    public Map<String, {{cls.nice_name}}> map{{cls.nice_name}} = new HashMap<>();
    {% else %}
    {% endif %}
    {% endfor %}

    {% for cls in classes_with_id %}
    public Function<String, {{cls.nice_name}}> fnString2{{cls.nice_name}};
    {% endfor %}

    public static Function<String, Integer> fnString2int = str->{
        try {
            return Integer.parseInt(str);
        } catch (NumberFormatException ex){}
        return 0;
    };

    public static Function<String, Float> fnString2float = str->{
        try {
            return Float.parseFloat(str);
        } catch (NumberFormatException ex){}
        return 0.0f;
    };

    public static Function<String, Long> fnString2long  = str->{
        try {
            return Long.parseLong(str);
        } catch (NumberFormatException ex){}
        return 0L;
    };

    public static Function<String, String> fnString2String = str->str;




    public {{loader}}(){
        {% for cls in classes_with_id %}
        fnString2{{cls.nice_name}} = str->utilGetItem(map{{cls.nice_name}}, str);
        {% endfor %}
    }

    public boolean load(byte[] data, String preset){
        this.data = data;
        this.preset = preset;

        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(new ByteArrayInputStream(data));
            Element root = document.getDocumentElement();

            timestamp = Long.parseLong(root.getAttribute("timestamp"));

            {% for cls in classes_with_id %}
            /////////////load - {{cls.nice_name}}
            {
                Node child = root.getElementsByTagName("{{cls.name}}").item(0).getFirstChild();

                Map<String, {{cls.nice_name}}> itemsMap = map{{cls.nice_name}};
                itemsMap.clear();

                while(child != null)
                {
                    if (child.getNodeType() == Node.ELEMENT_NODE) {
                        {{cls.nice_name}} item = new {{cls.nice_name}}();
                        item.id = utilParse_String(child, "id", preset);
                        itemsMap.put(item.id.toLowerCase(), item);
                    }
                    child = child.getNextSibling();
                }
            }
            {% endfor %}

            ///init all classes

            {% for cls in classes %}
            /////////////load - {{cls.nice_name}}
            {
                Node child = root.getElementsByTagName("{{cls.name}}").item(0).getFirstChild();
                ArrayList<{{cls.nice_name}}> items = list{{cls.nice_name}};
                items.clear();

                while(child != null)
                {
                    if (child.getNodeType() == Node.ELEMENT_NODE) {
                        {% if cls.has_id %}
                        {{cls.nice_name}} item = utilGetItem(map{{cls.nice_name}}, utilParse_String(child, "id", preset));
                        {% else %}
                        {{cls.nice_name}} item = new {{cls.nice_name}}();
                        {% endif %}
                        item.init(child, items.size(), this);
                        items.add(item);
                    }
                    child = child.getNextSibling();
                }
            }
            {% endfor %}

            return true;
        } catch (ParserConfigurationException ex)
        {}
        catch (SAXException ex)
        {}
        catch (IOException ex)
        {}

        return false;
    }


    public void assignStaticInstances(){
        {% for cls in classes %}
        {{cls.nice_name}}.items = list{{cls.nice_name}};
        {% if cls.has_id %}
        {{cls.nice_name}}.itemsMap = map{{cls.nice_name}};
        {% else %}
        {% endif %}
        {% endfor %}
    }



    private static <T> List<T> utilParse_String2List(String st, Function<String, T> fn)
    {
        return Arrays.stream(st.split(",")).map(String::trim).map(fn).collect(Collectors.toList());
    }


    public static <T> T utilParse_Single(Node node, String name, String preset, Function<String, T> fn)
    {
        String st = utilParse_String(node, name, preset);
        return fn.apply(st);
    }

    static <T> List<T> utilParse_List(Node node, String name, String preset, Function<String, T> fn)
    {
        return utilParse_String2List(utilParse_String(node, name, preset), fn);
    }

    static <T> Map<String, T> utilParse_Named(Node node, String name, String preset, Function<String, T> fn){

        NamedNodeMap attrs = node.getAttributes();
        String pref = name + ".";


        String suffix = "#" + preset;

        Map<String, T> items = new HashMap<>();
        for (int i = 0; i < attrs.getLength(); ++i)
        {
            Node attrNode = attrs.item(i);
            String attrName = attrNode.getNodeName();

            if (!attrName.startsWith(pref) || attrName.contains("#"))
                continue;

            String nam = attrName.substring(pref.length());
            String value = attrNode.getNodeValue();

            if (preset != null){
                Node nodePreset = attrs.getNamedItem(attrName + suffix);
                if (nodePreset != null)
                    value = nodePreset.getNodeValue();
            }

            items.put(nam, fn.apply(value));

        }

        return items;
    }

    static <T> Map<String, List<T>> utilParse_NamedList(Node node, String name, String preset, Function<String, T> fn){
        Map<String, String> rs = utilParse_Named(node, name, preset, fnString2String);
        return rs.entrySet().stream().collect(Collectors.toMap(entry->entry.getKey(), entry->utilParse_String2List(entry.getValue(), fn)));
    }

    private static String utilParse_String(Node node, String name, String preset)
    {
        if (preset != null)
        {
            String key = name + "#" + preset;
            String value = node.getAttributes().getNamedItem(key).getNodeValue();
            if (value != null)
                return value;
        }
        String value = node.getAttributes().getNamedItem(name).getNodeValue();
        return value;
    }

    public static <T> T utilGetItem(Map<String, T> itemsMap, String name)
    {
        name = name.toLowerCase();
        return itemsMap.getOrDefault(name, null);
    }
}