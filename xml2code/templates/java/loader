package {{lang.args.package}};

/*
 file was automatically generated
*/

import com.google.protobuf.MapEntry;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;
import java.io.ByteArrayInputStream;
import java.util.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;

public class {{loader}}
{
    public String preset;
    public Long timestamp;
    public byte[] data;


    {% for cls in classes %}
    public ArrayList<{{cls.nice_name}}> list{{cls.nice_name}} = new ArrayList<>();
    {% if cls.has_id %}
    public Map<String, {{cls.nice_name}}> map{{cls.nice_name}} = new HashMap<>();
    {% else %}
    {% endif %}
    {% endfor %}

    public {{loader}}(){
    }

    public boolean load(byte[] data, String preset){
        this.data = data;
        this.preset = preset;

        try {
            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
            Document document = documentBuilder.parse(new ByteArrayInputStream(data));
            Element root = document.getDocumentElement();



            timestamp = Long.parseLong(root.getAttribute("timestamp"));


            {% for cls in classes_with_id %}
            /////////////load - {{cls.nice_name}}
            {
                Node child = root.getElementsByTagName("{{cls.name}}").item(0).getFirstChild();

                Map<String, {{cls.nice_name}}> itemsMap = map{{cls.nice_name}};
                itemsMap.clear();

                while(child != null)
                {
                    if (child.getNodeType() == Node.ELEMENT_NODE) {

                        {{cls.nice_name}} item = new {{cls.nice_name}}();
                        item.id = utilParse_String(child, "id", preset);
                        itemsMap.put(item.id.toLowerCase(), item);
                    }
                    child = child.getNextSibling();
                }
            }
            {% endfor %}

            {% for cls in classes %}
            /////////////load - {{cls.nice_name}}
            {
                Node child = root.getElementsByTagName("{{cls.name}}").item(0).getFirstChild();
                ArrayList<{{cls.nice_name}}> items = list{{cls.nice_name}};
                items.clear();

                while(child != null)
                {
                    if (child.getNodeType() == Node.ELEMENT_NODE) {

                        {% if cls.has_id %}
                        {{cls.nice_name}} item = utilGetItem(map{{cls.nice_name}}, utilParse_String(child, "id", preset));
                        {% else %}
                        {{cls.nice_name}} item = new {{cls.nice_name}}();
                        {% endif %}

                        item.init(child, items.size(), this);

                        items.add(item);
                    }
                    child = child.getNextSibling();
                }
            }
            {% endfor %}

            return true;
        } catch (ParserConfigurationException ex)
        {}
        catch (SAXException ex)
        {}
        catch (IOException ex)
        {}

        return false;
    }


    public void assignStaticInstances(){
        {% for cls in classes %}
        {{cls.nice_name}}.items = list{{cls.nice_name}};
        {% if cls.has_id %}
        {{cls.nice_name}}.itemsMap = map{{cls.nice_name}};
        {% else %}
        {% endif %}
        {% endfor %}
    }

    public static <T> List< Map.Entry<String, T> > utilParse_NamedList(Node node, String name, String preset){
        return null;
    }

    public static <T> List<T> utilParse_List(Map<String, T> itemsMap, Node node, String name, String preset){
        return null;
    }

    public static String utilParse_String(Node node, String name, String preset)
    {
        if (preset != null)
        {
            String key = name + "#" + preset;
            String value = node.getAttributes().getNamedItem(key).getNodeValue();
            if (value != null)
                return value;
        }
        String value = node.getAttributes().getNamedItem(name).getNodeValue();
        return value;
    }

    public static long utilParse_long(Node node, String name, String preset)
    {
        String value = utilParse_String(node, name, preset);
        try {
            return Long.parseLong(value);
        } catch(NumberFormatException ex) {
            return 0;
        }
    }

    public static int utilParse_int(Node node, String name, String preset)
    {
        String value = utilParse_String(node, name, preset);
        try {
            return Integer.parseInt(value);
        } catch(NumberFormatException ex) {
            return 0;
        }
    }

    public static double utilParse_double(Node node, String name, String preset)
    {
        String value = utilParse_String(node, name, preset);
        try {
            return Double.parseDouble(value);
        } catch(NumberFormatException ex) {
            return 0;
        }
    }

    public static float utilParse_float(Node node, String name, String preset)
    {
        String value = utilParse_String(node, name, preset);
        try {
            return Float.parseFloat(value);
        } catch(NumberFormatException ex) {
            return 0;
        }
    }

    public static <T> T utilGetItem(Map<String, T> itemsMap, String name)
    {
        name = name.toLowerCase();
        return itemsMap.getOrDefault(name, null);
    }
}